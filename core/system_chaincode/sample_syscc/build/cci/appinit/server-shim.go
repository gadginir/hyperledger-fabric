/* Generated by chaintool.  DO NOT EDIT */

package appinit

import (
	"errors"
	proto "github.com/golang/protobuf/jsonpb"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	"github.com/hyperledger/fabric/core/system_chaincode/sample_syscc/build/ccs/stub"
)

type CCInterface interface {
	Init(*shim.ChaincodeStub, *Init) error
}

type StubImpl struct {
	Interface CCInterface
}

// Factory mechanics
type FactoryImpl struct {
}

func init() {
	self := &FactoryImpl{}
	stub.Register("appinit", self)
}

func (self *FactoryImpl) Create(intf interface{}) (stub.Dispatcher, error) {
	return &StubImpl{Interface: intf.(CCInterface)}, nil
}

func (self *StubImpl) DispatchTxn(stub *shim.ChaincodeStub, function int, params string) ([]byte, error) {
	// Handle different functions
	switch {
	case function == 1:
		return self.InitStub(stub, params)
	default:
		return nil, errors.New("Received unknown function invocation")
	}
}

func (self *StubImpl) DispatchQuery(stub *shim.ChaincodeStub, function int, params string) ([]byte, error) {
	// Handle different functions
	switch {
	default:
		return nil, errors.New("Received unknown function invocation")
	}
}

/* Server stubs */
func (self *StubImpl) InitStub(stub *shim.ChaincodeStub, _params string) ([]byte, error) {

	params := &Init{}
	err := proto.UnmarshalString(_params, params)
	if err != nil {
		return nil, err
	}

	err = self.Interface.Init(stub, params)
	if err != nil {
		return nil, err
	}

	return nil, nil
}
